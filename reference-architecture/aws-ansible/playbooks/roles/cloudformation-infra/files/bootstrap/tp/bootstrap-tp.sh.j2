#!/bin/bash
# Description: this script creates required transparent squid proxy configuration
#
# Arguments
# $1: CloudFormation stack name
# $2: CloudWatch Logs log group
# $3: S3 Bucket containing squid package
#

### Parameters

stackname="$1"
loggroup="$2"
s3loc="$3"

# HTTP_PROXY
PROXY_NO_PROTO=${HTTP_PROXY#*//}
HTTP_PROXY_HOST=${PROXY_NO_PROTO%:*}
HTTP_PROXY_PORT=${PROXY_NO_PROTO#*:}


### Functions

# Checking parameters
check_parameters() {
  if [ -z "$stackname" ] || [ -z "$loggroup" ] || [ -z "$s3loc" ]; then
    echo "Missing arguments"
    exit 1
  fi
  if [ -z "$HTTP_PROXY" ]; then
    echo "Missing HTTP_PROXY environment variable"
    exit 1
  fi
}


# Create self-signed SSL certificate for squid.
# The certificate is required only for squid to startup but will not be used
# since we will run squid as a layer 4 proxy
generate_squid_cert() {
  mkdir -p /etc/squid/ssl_cert
  cd /etc/squid/ssl_cert
  openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -extensions v3_ca -keyout myCA.pem -out myCA.pem -subj "/C=FR/ST=Paris/L=Paris/O=Société Générale/OU=RESG-GTS/CN=oip-transparent-squid.aws"
}

# Function to generate squid configuration to act as a transparent proxy
generate_squid_config() {
  cat > /etc/squid/squid.conf<<EOT
  # ACL definitions
  acl SSL_ports port 443
  acl Safe_ports port 80          # http
  acl Safe_ports port 21          # ftp
  acl Safe_ports port 443         # https
  acl Safe_ports port 70          # gopher
  acl Safe_ports port 210         # wais
  acl Safe_ports port 1025-65535  # unregistered ports
  acl Safe_ports port 280         # http-mgmt
  acl Safe_ports port 488         # gss-http
  acl Safe_ports port 591         # filemaker
  acl Safe_ports port 777         # multiling http
  acl CONNECT method CONNECT

  acl srv-aws src 10.0.0.0/8

  http_access deny !Safe_ports
  http_access deny CONNECT !SSL_ports
  http_access allow localhost manager
  http_access deny manager
  http_access allow localhost
  #http_access allow srv-aws s3
  #http_access allow srv-aws virtual_host_urls
  #http_access allow srv-aws path_urls
  http_access allow srv-aws
  http_access allow all

  cache_effective_group squid
  cache_effective_user squid

  http_port 3128 require-proxy-header
  http_port 3129 transparent
  #https_port 3130 intercept ssl-bump cert=/etc/squid/ssl_cert/myCA.pem generate-host-certificates=on dynamic_cert_mem_cache_size=4MB  options=NO_SSLv2,NO_SSLv3,NO_TLSv1,NO_TLSv1_1,NO_TICKET cipher=HIGH:MEDIUM:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS
  https_port 3130 intercept ssl-bump cert=/etc/squid/ssl_cert/myCA.pem

  ssl_bump splice all

  cache_peer $HTTP_PROXY_HOST parent $HTTP_PROXY_PORT 0 no-query default

  coredump_dir /var/spool/squid

  refresh_pattern ^ftp:           1440    20%     10080
  refresh_pattern ^gopher:        1440    0%      1440
  refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
  refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880
  refresh_pattern .               0       20%     4320

  never_direct allow srv-aws
  never_direct allow localhost

  dns_v4_first off

  via on

  httpd_suppress_version_string off

  forwarded_for on

  access_log daemon:/var/log/squid/access.log combined
  logformat combined %>a %ui %un [%tl] "%rm %ru HTTP/%rv" %Hs %<st "%{Referer}>h" "%{User-Agent}>h" %Ss:%Sh

  netdb_filename stdio:/var/log/squid/netdb.state

  pinger_enable on

  # Increasing the number of file descriptors to solve cache errors
  max_filedescriptors 65535
EOT
}

install_and_run_squid() {
  echo "-> Installing squid"
  yum -y install squid

  echo "-> Generating the Squid SSL Certificate"
  generate_squid_cert

  echo "-> Generating the Squid configuration"
  generate_squid_config

  if $(type systemctl >/dev/null 2>&1); then
    echo "-> Enabling the Squid service"
    systemctl enable squid
    echo "-> Starting the Squid service"
    systemctl start squid
  else
    echo "-> Enabling the Squid service"
    chkconfig squid on
    echo "-> Starting the Squid service"
    service squid start
  fi

  #echo "-> Running Squid service as docker container"
  #docker run --name squid -d --restart=always \
  #  --publish 3128:3128 \
  #  --publish 3130:3130 \
  #  --volume /etc/squid/squid.conf:/etc/squid/squid.conf \
  #  --volume /etc/squid/ssl_cert/myCA.pem:/etc/squid/ssl_cert/myCA.pem \
  #  --volume /srv/docker/squid/cache:/var/spool/squid \
  #  sameersbn/squid:3.5.27-1

}

set_as_router() {
  # Logic: find the region, zone and AZ of the instance then find out the
  #        custom route table associated with the private subnetid of this
  #        AZ and finaly set a new default route within that route table
  #        pointing to the ENI of this instance
  echo "-> Adding IPTables rules to forward port 80 and 443 to the transparent Squid instance"
  iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3129
  iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3130

  II_URI="http://169.254.169.254/latest/dynamic/instance-identity/document"
  REGION=$(curl --retry 3 --retry-delay 0 --silent --fail $II_URI | grep region | awk -F\" '{print $4}')
  INSTANCE_ID=$(curl --retry 3 --retry-delay 0 --silent --fail $II_URI | grep instanceId | awk -F\" '{print $4}')
  VPC_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].VpcId' --region $REGION --output text)
  AZ=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].Placement.AvailabilityZone' --region $REGION --output text)
  SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Network,Values=CIAP_Browsing_Private" "Name=availability-zone,Values=$AZ" --query Subnets[*].SubnetId --region $REGION --output text)
  MAIN_RT=$(aws ec2 describe-route-tables --filters "Name=association.subnet-id,Values=$SUBNET_ID" --query 'RouteTables[*].RouteTableId' --region $REGION --output text)

  # Printing some debuging information...
  cat <<EOT
  Transparent SQUID proxy - Initializing
  - Region: $REGION
  - Availability Zone: $AZ
  - VPC ID: $VPC_ID
  - Subnet ID: $SUBNET_ID
  - Instance ID: $INSTANCE_ID
  - Route table: $MAIN_RT
EOT

  echo "-> Allowing instance to route traffic by disabling Src/Dest Check"
  aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --no-source-dest-check --region $REGION


  echo "-> Creating route default route pointing at the current instance"
  aws ec2 create-route --route-table-id $MAIN_RT --destination-cidr-block 0.0.0.0/0 --instance-id $INSTANCE_ID --region $REGION --output text
  if [ $? -ne 0 ] ; then
    echo  "-> Default route already exists, replacing it with one pointing at the current instance"
    aws ec2 replace-route --route-table-id $MAIN_RT --destination-cidr-block 0.0.0.0/0 --instance-id $INSTANCE_ID --region $REGION --output text
  fi
}



### Main logic!

check_parameters
get_context
install_and_run_squid
set_as_router
