#
# A virtual host using mix of IP-, name-, and port-based configuration
#

## Control logging
# https://bjornjohansen.no/exclude-requests-from-nginx-access-log
# Map to disable logging of some requests
map $http_user_agent $excluded_ua {
    ~www.uptimerobot.com 0;
    default 1;
}

# For websocket
# http://nginx.org/en/docs/http/websocket.html?_ga=2.240289219.1347750645.1526706174-1640745797.1526706174
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Force HTTPS for console access
server {
    listen 80;
    server_name console.{{cluster_id}}.{{ public_dns_domain }} console.{{cluster_id}}.{{ public_dns_domain | regex_replace('^\\w+.(.*)$', '\\1') }};
    # Force HTTPS
    return 301 https://$server_name$request_uri;
    access_log  /var/log/nginx/access_{{cluster_id}}.{{ public_dns_domain }}.log main if=$excluded_ua;
    error_log  /var/log/nginx/error_{{cluster_id}}.{{ public_dns_domain }}.log;
}

server {
    # Enable TLS and HTTP2
    listen       443 ssl http2;
    server_name console.{{cluster_id}}.{{ public_dns_domain }} console.{{cluster_id}}.{{ public_dns_domain | regex_replace('^\\w+.(.*)$', '\\1') }};
    access_log  /var/log/nginx/access_{{cluster_id}}.{{ public_dns_domain }}.log main if=$excluded_ua;
    error_log  /var/log/nginx/error_{{cluster_id}}.{{ public_dns_domain }}.log;

    ssl_certificate      /etc/letsencrypt/live/www.{{ public_dns_domain }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/www.{{ public_dns_domain }}/privkey.pem;
    ssl_client_certificate /etc/nginx/certs/ca-chain.cert.pem;
    ssl_verify_client off;
    ssl_verify_depth 2;

    # Use only TLS TLSv1.2+
    ssl_protocols TLSv1.2 TLSv1.3;

    # Tell client which ciphers are available
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # ssl_dhparam /etc/nginx/certs/dhparams.pem;

    # Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000" always;

    # Optimize session cache
    ssl_session_cache   shared:SSL:40m;
    ssl_session_timeout 4h;

    # Enable session tickets
    ssl_session_tickets on;

    client_max_body_size 2048M;

    location /basic_status {
        stub_status;
    }

    # For OCP console watch requests
    location /apis/ {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass https://internal-openshift-master.{{cluster_id}}.{{ private_dns_domain }}:443/apis/;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto "https";
    }
    # For pod logs & pod console access
    location /oapi/ {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass https://internal-openshift-master.{{cluster_id}}.{{ private_dns_domain }}:443/oapi/;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto "https";
    }
    # For pod logs & pod console access
    location /api/ {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass https://internal-openshift-master.{{cluster_id}}.{{ private_dns_domain }}:443/api/;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto "https";
    }
    location / {
        set $acac true;
        if ($http_origin = ''){
            set $acac false;
            set $http_origin "*";
        }
        if ($request_method = 'OPTIONS') {

            # CORS configuration, from http://enable-cors.org/server_nginx.html
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            #
            #     Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' '$acac';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' '$acac';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' '$acac';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass https://internal-openshift-master.{{cluster_id}}.{{ private_dns_domain }}:443/;
        proxy_set_header X-Forwarded-Proto "https";
    }
}

{% set pshhdom = public_dns_domain if (public_dns_domain != 'prd.lab-nxtit.com') else public_dns_domain | regex_replace('^\\w+.(.*)$', '\\1') %}

# Allow HTTP access for applications
# As a reminder, securing them during experimental phases might be tricky and
# it doesn't seem required to encrypt all apps communications. It is recommended
# but not mandatory for the "sandboxes without data access" concept validated
# by the Security Task Force.
server {
    listen 80;
    server_name ~^(?<subdomain>.+)\.apps\.{{cluster_id}}\.{{ public_dns_domain | regex_replace('\\.', '\\\\.') }}$ ~^(?<subdomain>.+)\.apps\.{{cluster_id}}\.{{ public_dns_domain | regex_replace('^\\w+.(.*)$', '\\1') | regex_replace('\\.', '\\\\.') }}$;
    access_log  /var/log/nginx/access_wildcard_{{cluster_id}}.{{ public_dns_domain }}.log main if=$excluded_ua;
    error_log  /var/log/nginx/error_wildcard_{{cluster_id}}.{{ public_dns_domain }}.log;

    client_max_body_size 2048M;

    resolver 10.0.0.2 valid=5s;
    set $elb "infra-elb.apps.{{cluster_id}}.{{ private_dns_domain }}";
    location / {
        proxy_pass http://$elb:80;
        proxy_set_header Host $subdomain.apps.{{cluster_id}}.{{ pshhdom }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto "http";
    }
}

# Allow HTTPS access for applications
server {
    # Enable TLS and HTTP2
    listen 443 ssl http2;
    server_name ~^(?<subdomain>.+)\.apps\.{{cluster_id}}\.{{ public_dns_domain | regex_replace('\\.', '\\\\.') }}$ ~^(?<subdomain>.+)\.apps\.{{cluster_id}}\.{{ public_dns_domain | regex_replace('^\\w+.(.*)$', '\\1') | regex_replace('\\.', '\\\\.') }}$;
    access_log  /var/log/nginx/access_wildcard_{{cluster_id}}.{{ public_dns_domain }}.log main if=$excluded_ua;
    error_log  /var/log/nginx/error_wildcard_{{cluster_id}}.{{ public_dns_domain }}.log;

    ssl_certificate      /etc/letsencrypt/live/www.{{ public_dns_domain }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/www.{{ public_dns_domain }}/privkey.pem;
    ssl_client_certificate /etc/nginx/certs/ca-chain.cert.pem;
    ssl_verify_client off;
    ssl_verify_depth 2;

    # Use only TLS TLSv1.2+
    ssl_protocols TLSv1.2 TLSv1.3;

    # Tell client which ciphers are available
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # ssl_dhparam /etc/nginx/certs/dhparams.pem;

    # Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000" always;

    # Optimize session cache
    ssl_session_cache   shared:SSL:40m;
    ssl_session_timeout 4h;

    # Enable session tickets
    ssl_session_tickets on;

    client_max_body_size 2048M;

    location /basic_status {
        stub_status;
    }

    resolver 10.0.0.2 valid=5s;
    set $elb "infra-elb.apps.{{cluster_id}}.{{ private_dns_domain }}";
    location / {
        proxy_ssl_verify off;
        # May be required to support transparent proxyfication of
        # SSL Passthrough OpenShift routes
        proxy_ssl_name $host;
        proxy_ssl_server_name on;
        proxy_pass https://$elb:443;
        proxy_set_header Host $subdomain.apps.{{cluster_id}}.{{ pshhdom }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto "https";
        # for Nexus
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        # for jupyter-notebook
        proxy_http_version 1.1;
        # to test if nginx hangs again
        #reset_timedout_connection 1s;
    }
}

