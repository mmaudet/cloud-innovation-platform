AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template creates a Multi-AZ, multi-VPC and multi-subnet infrastructure.
  It contains definitions for core infrastructure:
    VPCs: CIAP, Admin and Tech
    Network elements: subnets, routing, internet gateways
  **WARNING** This template creates AWS resources. You will be billed for the AWS
  resources used if you create a stack from this template. QS(0027)

Parameters:
  NumberOfAZs:
    AllowedValues:
    - '2'
    - '3'
    - '4'
    Default: '2'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  DeployWAFResources:
    Default: true
    Description: Deploy NAT resources or not
    Type: String
  DeployNATResources:
    Default: true
    Description: Deploy NAT resources or not
    Type: String
  DeployVPNResources:
    Default: true
    Description: Deploy VPN resources or not
    Type: String
  VPCCiapCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/20
    Description: CIDR block for the CIAP VPC
    Type: String
{% for idx in range(1, ciap_nb_subnets|int + 1) %}
  CiapHostingSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ ( idx - 1 ) * 4 }}.0/24
    Description: CIDR block for Hosting subnet {{ idx }} located in Availability Zone {{ idx }}
    Type: String
  CiapBrowsingSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ ( idx - 1 ) * 4 + 1 }}.0/24
    Description: CIDR block for Browsing subnet {{ idx }}A located in Availability Zone {{ idx }}
    Type: String
  CiapVPNSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ ( idx - 1 ) * 4 + 2 }}.0/24
    Description: CIDR block for VPN subnet {{ idx }}A located in Availability Zone {{ idx }}
    Type: String
{% endfor %}
  VPCAdminCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.16.0/20
    Description: CIDR block for the Admin VPC
    Type: String
{% for idx in range(1, admin_nb_subnets|int + 1) %}
  AdminSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ 16 + ( idx - 1 ) * 4 }}.0/24
    Description: CIDR block for Admin subnet {{ idx }} located in Availability Zone {{ idx }}
    Type: String
{% endfor %}
  VPCTechCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/20
    Description: CIDR block for the Tech VPC
    Type: String
{% for idx in range(1, tech_nb_subnets|int + 1) %}
  TechSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ 32 + ( idx - 1 ) * 4 }}.0/24
    Description: CIDR block for Tech subnet {{ idx }} located in Availability Zone {{ idx }}
    Type: String
{% endfor %}
  VPCProjectCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/17
    Description: CIDR block for the Project VPC
    Type: String
{% for idx in range(1, project_nb_subnets|int + 1) %}
  ProjectSubNet{{ idx }}CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.{{ 250 + ( idx - 1 ) }}.0/24
    Description: CIDR block for Project default subnet {{ idx }} located in Availability Zone {{ idx }}
    Type: String
{% endfor %}
  S3BucketPrefix:
    Description: S3 Bucket Prefix
    Type: String
  PrivateDNSDomain:
    Description: Private DNS Domain
    Type: String

Conditions:
  1AZCondition: !Or [!Equals [!Ref NumberOfAZs, 1], {Condition: 2AZCondition}]
  2AZCondition: !Or [!Equals [!Ref NumberOfAZs, 2], {Condition: 3AZCondition}]
  3AZCondition: !Or [!Equals [!Ref NumberOfAZs, 3], {Condition: 4AZCondition}]
  4AZCondition: !Equals [!Ref NumberOfAZs, 4]
  WAFInstanceCondition: !Equals [!Ref DeployWAFResources, true]
  NATInstanceCondition: !Equals [!Ref DeployNATResources, true]
  VPNInstanceCondition: !Equals [!Ref DeployVPNResources, true]
  NVirginiaRegionCondition: !Equals [!Ref 'AWS::Region', us-east-1]

Resources:
  ### VPC CIAP
  VPCCiapDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: {{ private_dns_domain }}
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Ciap']]
  VPCCiap:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCiapCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Ciap']]
  VPCCiapDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPCCiap'
      DhcpOptionsId: !Ref 'VPCCiapDHCPOptions'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'IGW']]
      - Key: Network
        Value: Public
  VPCCiapGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPCCiap'
      InternetGatewayId: !Ref 'InternetGateway'
  CiapRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPCCiap'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'CIAP-RouteTable']]
      - Key: Network
        Value: CIAP_Hosting
  CiapRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'CiapRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  CiapRoute2Admin:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2AdminPeeringConnection
    Properties:
      RouteTableId: !Ref 'CiapRouteTable'
      DestinationCidrBlock: !Ref VPCAdminCIDR
      VpcPeeringConnectionId: !Ref VPCCiap2AdminPeeringConnection
  CiapRoute2Tech:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2TechPeeringConnection
    Properties:
      RouteTableId: !Ref 'CiapRouteTable'
      DestinationCidrBlock: !Ref VPCTechCIDR
      VpcPeeringConnectionId: !Ref VPCCiap2TechPeeringConnection
  CiapRoute2Project:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'CiapRouteTable'
      DestinationCidrBlock: !Ref VPCProjectCIDR
      VpcPeeringConnectionId: !Ref VPCCiap2ProjectPeeringConnection
{% for idx in range(1, ciap_nb_subnets|int + 1) %}
  CiapHostingSubNet{{ idx }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCCiap'
      CidrBlock: !Ref 'CiapHostingSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'CIAP-Hosting-subnet-{{ idx }}']]
      - Key: Network
        Value: CIAP_Hosting
  CiapHostingSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'CiapHostingSubNet{{ idx }}'
      RouteTableId: !Ref 'CiapRouteTable'
  CiapBrowsingSubNet{{ idx }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCCiap'
      CidrBlock: !Ref 'CiapBrowsingSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'CIAP-Browsing-subnet-{{ idx }}']]
      - Key: Network
        Value: CIAP_Browsing
  CiapBrowsingSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'CiapBrowsingSubNet{{ idx }}'
      RouteTableId: !Ref 'CiapRouteTable'
  CiapVPNSubNet{{ idx }}:
    Condition: VPNInstanceCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCCiap'
      CidrBlock: !Ref 'CiapVPNSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'CIAP-VPN-subnet-{{ idx }}']]
      - Key: Network
        Value: CIAP_VPN
  CiapVPNSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'CiapVPNSubNet{{ idx }}'
      RouteTableId: !Ref 'CiapRouteTable'
{% endfor %}
  VPCCiap2AdminPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCCiap
      PeerVpcId:
        Ref: VPCAdmin
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Ciap2Admin']]
  VPCCiap2TechPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCCiap
      PeerVpcId:
        Ref: VPCTech
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Ciap2Tech']]
  VPCCiap2ProjectPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCCiap
      PeerVpcId:
        Ref: VPCProject
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Ciap2Project']]
  VPCCiapS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access to AMZN Linux repo
          Principal: '*'
          Action:
            - 's3:List*'
            - 's3:Get*'
          Effect: Allow
          Resource:
            - !Join ['', ['arn:aws:s3:::repo.eu-west-1.amazonaws.com']]
            - !Join ['', ['arn:aws:s3:::repo.eu-west-1.amazonaws.com/*']]
        - Sid: Allow access only to current stack buckets
          Principal: '*'
          Action:
            - 's3:CreateBucket'
            - 's3:List*'
            - 's3:Get*'
            - 's3:Put*'
          Effect: Allow
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs/*']]
        - Sid: Allow listing buckets (required by ansible s3_bucket module)
          Principal: '*'
          Action:
            - 's3:ListAllMyBuckets'
          Effect: Allow
          Resource: '*'
      RouteTableIds:
      - !Ref 'CiapRouteTable'
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'VPCCiap'
  ### VPC Admin
  VPCAdminDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: {{ private_dns_domain }}
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Admin']]
  VPCAdmin:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCAdminCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Admin']]
  VPCAdminDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPCAdmin'
      DhcpOptionsId: !Ref 'VPCAdminDHCPOptions'
  AdminRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPCAdmin'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Admin-RouteTable']]
      - Key: Network
        Value: Admin
  AdminRoute2Ciap:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2AdminPeeringConnection
    Properties:
      RouteTableId: !Ref 'AdminRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      VpcPeeringConnectionId: !Ref VPCCiap2AdminPeeringConnection
  AdminRoute2Tech:
    Type: AWS::EC2::Route
    DependsOn: VPCAdmin2TechPeeringConnection
    Properties:
      RouteTableId: !Ref 'AdminRouteTable'
      DestinationCidrBlock: !Ref VPCTechCIDR
      VpcPeeringConnectionId: !Ref VPCAdmin2TechPeeringConnection
  AdminRoute2Project:
    Type: AWS::EC2::Route
    DependsOn: VPCAdmin2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'AdminRouteTable'
      DestinationCidrBlock: !Ref VPCProjectCIDR
      VpcPeeringConnectionId: !Ref VPCAdmin2ProjectPeeringConnection
{% for idx in range(1, admin_nb_subnets|int + 1) %}
  AdminSubNet{{ idx }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCAdmin'
      CidrBlock: !Ref 'AdminSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Admin-subnet-{{ idx }}']]
      - Key: Network
        Value: Admin
  AdminSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'AdminSubNet{{ idx }}'
      RouteTableId: !Ref 'AdminRouteTable'
{% endfor %}
  VPCAdmin2TechPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCAdmin
      PeerVpcId:
        Ref: VPCTech
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Admin2Tech']]
  VPCAdmin2ProjectPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCAdmin
      PeerVpcId:
        Ref: VPCProject
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Admin2Project']]
  VPCAdminS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access only to current stack buckets
          Principal: '*'
          Action:
            - 's3:CreateBucket'
            - 's3:List*'
            - 's3:Get*'
            - 's3:Put*'
          Effect: Allow
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs/*']]
      RouteTableIds:
      - !Ref 'AdminRouteTable'
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'VPCAdmin'
  ### VPC Tech
  VPCTechDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: {{ private_dns_domain }}
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Tech']]
  VPCTech:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCTechCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Tech']]
  VPCTechDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPCTech'
      DhcpOptionsId: !Ref 'VPCTechDHCPOptions'
  TechRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPCTech'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Tech-RouteTable']]
      - Key: Network
        Value: Tech
  TechRoute2Ciap:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2TechPeeringConnection
    Properties:
      RouteTableId: !Ref 'TechRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      VpcPeeringConnectionId: !Ref VPCCiap2TechPeeringConnection
  TechRoute2Admin:
    Type: AWS::EC2::Route
    DependsOn: VPCAdmin2TechPeeringConnection
    Properties:
      RouteTableId: !Ref 'TechRouteTable'
      DestinationCidrBlock: !Ref VPCAdminCIDR
      VpcPeeringConnectionId: !Ref VPCAdmin2TechPeeringConnection
  TechRoute2Project:
    Type: AWS::EC2::Route
    DependsOn: VPCTech2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'TechRouteTable'
      DestinationCidrBlock: !Ref VPCProjectCIDR
      VpcPeeringConnectionId: !Ref VPCTech2ProjectPeeringConnection
{% for idx in range(1, tech_nb_subnets|int + 1) %}
  TechSubNet{{ idx }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCTech'
      CidrBlock: !Ref 'TechSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Tech-subnet-{{ idx }}']]
      - Key: Network
        Value: Tech
  TechSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TechSubNet{{ idx }}'
      RouteTableId: !Ref 'TechRouteTable'
{% endfor %}
  VPCTech2ProjectPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: VPCTech
      PeerVpcId:
        Ref: VPCProject
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Tech2Project']]
  VPCTechS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access only to current stack buckets
          Principal: '*'
          Action:
            - 's3:CreateBucket'
            - 's3:List*'
            - 's3:Get*'
            - 's3:Put*'
          Effect: Allow
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs/*']]
      RouteTableIds:
      - !Ref 'TechRouteTable'
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'VPCTech'
  ### VPC Project
  VPCProjectDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      #DomainName: {{ private_dns_domain }}
      DomainName: {{ region }}.compute.internal
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Project']]
  VPCProject:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCProjectCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'VPC-Project']]
  VPCProjectDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPCProject'
      DhcpOptionsId: !Ref 'VPCProjectDHCPOptions'
  ProjectRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPCProject'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Project-RouteTable']]
      - Key: Network
        Value: Project
{% for idx in range(1, project_nb_subnets|int + 1) %}
  ProjectSubNet{{ idx }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCProject'
      CidrBlock: !Ref 'ProjectSubNet{{ idx }}CIDR'
      AvailabilityZone:
        Fn::Select:
          - {{ idx - 1 }}
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'Project-subnet-{{ idx }}']]
      - Key: Network
        Value: Project
      - Key: kubernetes.io/cluster/{{stack_name}}
        Value: owned
  ProjectSubNet{{ idx }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ProjectSubNet{{ idx }}'
      RouteTableId: !Ref 'ProjectRouteTable'
{% endfor %}
  ProjectRoute2Default:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'ProjectRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      VpcPeeringConnectionId: !Ref VPCCiap2ProjectPeeringConnection
  ProjectRoute2Ciap:
    Type: AWS::EC2::Route
    DependsOn: VPCCiap2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'ProjectRouteTable'
      DestinationCidrBlock: !Ref VPCCiapCIDR
      VpcPeeringConnectionId: !Ref VPCCiap2ProjectPeeringConnection
  ProjectRoute2Admin:
    Type: AWS::EC2::Route
    DependsOn: VPCAdmin2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'ProjectRouteTable'
      DestinationCidrBlock: !Ref VPCAdminCIDR
      VpcPeeringConnectionId: !Ref VPCAdmin2ProjectPeeringConnection
  ProjectRoute2Tech:
    Type: AWS::EC2::Route
    DependsOn: VPCTech2ProjectPeeringConnection
    Properties:
      RouteTableId: !Ref 'ProjectRouteTable'
      DestinationCidrBlock: !Ref VPCTechCIDR
      VpcPeeringConnectionId: !Ref VPCTech2ProjectPeeringConnection
  VPCProjectS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access only to current stack buckets
          Principal: '*'
          Action:
            - 's3:CreateBucket'
            - 's3:List*'
            - 's3:Get*'
            - 's3:Put*'
          Effect: Allow
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-*/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-data/*']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs']]
            - !Join ['', ['arn:aws:s3:::', !Ref S3BucketPrefix, '-logs/*']]
      RouteTableIds:
      - !Ref 'ProjectRouteTable'
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'VPCProject'

  ### DNS
  ### Public zones are created by Ansible because they may need to persist when stack is deleted...
  DNSPrivateZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: !Join ['', ['Private DNS Domain Name for stack ', !Ref 'AWS::StackName']]
      Name: !Ref PrivateDNSDomain
      VPCs:
        -
          VPCId: !Ref 'VPCCiap'
          VPCRegion: !Ref 'AWS::Region'
        -
          VPCId: !Ref 'VPCAdmin'
          VPCRegion: !Ref 'AWS::Region'
        -
          VPCId: !Ref 'VPCTech'
          VPCRegion: !Ref 'AWS::Region'
        -
          VPCId: !Ref 'VPCProject'
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        -
          Key: "DomainName"
          Value: !Ref PrivateDNSDomain

Outputs:
  VPCCiapCIDR:
    Value: !Ref 'VPCCiapCIDR'
    Description: VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCiapCIDR'
  VPCCiapID:
    Value: !Ref 'VPCCiap'
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCCiapID'
  CiapRouteTableID:
    Value: !Ref 'CiapRouteTable'
    Description: CIAP route table
    Export:
      Name: !Sub '${AWS::StackName}-CiapRouteTable'
{% for idx in range(1, ciap_nb_subnets|int + 1) %}
  CiapHostingSubNet{{ idx }}CIDR:
    Description: CIAP Hosting subnet 1 CIDR in Availability Zone {{ idx }}
    Value: !Ref 'CiapHostingSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-CiapHostingSubNet{{ idx }}CIDR'
  CiapHostingSubNet{{ idx }}ID:
    Description: CIAP Hosting subnet 1 ID in Availability Zone {{ idx }}
    Value: !Ref 'CiapHostingSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-CiapHostingSubNet{{ idx }}ID'
  CiapBrowsingSubNet{{ idx }}CIDR:
    Description: CIAP Browsing subnet 1 CIDR in Availability Zone {{ idx }}
    Value: !Ref 'CiapBrowsingSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-CiapBrowsingSubNet{{ idx }}CIDR'
  CiapBrowsingSubNet{{ idx }}ID:
    Description: CIAP Browsing subnet 1 ID in Availability Zone {{ idx }}
    Value: !Ref 'CiapBrowsingSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-CiapBrowsingSubNet{{ idx }}ID'
  CiapVPNSubNet{{ idx }}CIDR:
    Condition: VPNInstanceCondition
    Description: CIAP VPN subnet 1 CIDR in Availability Zone {{ idx }}
    Value: !Ref 'CiapVPNSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-CiapVPNSubNet{{ idx }}CIDR'
  CiapVPNSubNet{{ idx }}ID:
    Condition: VPNInstanceCondition
    Description: CIAP VPN subnet 1 ID in Availability Zone {{ idx }}
    Value: !Ref 'CiapVPNSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-CiapVPNSubNet{{ idx }}ID'
{% endfor %}
  VPCAdminCIDR:
    Value: !Ref 'VPCAdminCIDR'
    Description: Admin VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCAdminCIDR'
  VPCAdminID:
    Value: !Ref 'VPCAdmin'
    Description: Admin VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCAdminID'
  AdminRouteTableID:
    Value: !Ref 'AdminRouteTable'
    Description: Admin route table
    Export:
      Name: !Sub '${AWS::StackName}-AdminRouteTable'
{% for idx in range(1, admin_nb_subnets|int + 1) %}
  AdminSubNet{{ idx }}CIDR:
    Description: Admin subnet 1 CIDR in Availability Zone {{ idx }}
    Value: !Ref 'AdminSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-AdminSubNet{{ idx }}CIDR'
  AdminSubNet{{ idx }}ID:
    Description: Admin subnet 1 ID in Availability Zone {{ idx }}
    Value: !Ref 'AdminSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-AdminSubNet{{ idx }}ID'
{% endfor %}
  VPCTechCIDR:
    Value: !Ref 'VPCTechCIDR'
    Description: Tech VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCTechCIDR'
  VPCTechID:
    Value: !Ref 'VPCTech'
    Description: Tech VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCTechID'
  TechRouteTableID:
    Value: !Ref 'TechRouteTable'
    Description: Tech route table
    Export:
      Name: !Sub '${AWS::StackName}-TechRouteTable'
{% for idx in range(1, tech_nb_subnets|int + 1) %}
  TechSubNet{{ idx }}CIDR:
    Description: Tech subnet 1 CIDR in Availability Zone {{ idx }}
    Value: !Ref 'TechSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-TechSubNet{{ idx }}CIDR'
  TechSubNet{{ idx }}ID:
    Description: Tech subnet 1 ID in Availability Zone {{ idx }}
    Value: !Ref 'TechSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-TechSubNet{{ idx }}ID'
{% endfor %}
  VPCProjectCIDR:
    Value: !Ref 'VPCProjectCIDR'
    Description: Project VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCProjectCIDR'
  VPCProjectID:
    Value: !Ref 'VPCProject'
    Description: Project VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCProjectID'
  ProjectRouteTableID:
    Value: !Ref 'ProjectRouteTable'
    Description: Project route table
    Export:
      Name: !Sub '${AWS::StackName}-ProjectRouteTable'
{% for idx in range(1, project_nb_subnets|int + 1) %}
  ProjectSubNet{{ idx }}CIDR:
    Description: Project default ID in Availability Zone {{ idx }}
    Value: !Ref 'ProjectSubNet{{ idx }}CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-ProjectSubNet{{ idx }}CIDR'
  ProjectSubNet{{ idx }}ID:
    Description: Project default SubNet ID in Availability Zone {{ idx }}
    Value: !Ref 'ProjectSubNet{{ idx }}'
    Export:
      Name: !Sub '${AWS::StackName}-ProjectSubNet{{ idx }}ID'
{% endfor %}
  VPCCiapS3VPCEndpointID:
    Value: !Ref 'VPCCiapS3VPCEndpoint'
    Description: CIAP VPC Endpoint for S3
    Export:
      Name: !Sub '${AWS::StackName}-VPCCiapS3VPCEndpointID'
  VPCAdminS3VPCEndpointID:
    Value: !Ref 'VPCAdminS3VPCEndpoint'
    Description: Admin VPC Endpoint for S3
    Export:
      Name: !Sub '${AWS::StackName}-VPCAdminS3VPCEndpointID'
  VPCTechS3VPCEndpointID:
    Value: !Ref 'VPCTechS3VPCEndpoint'
    Description: Tech VPC Endpoint for S3
    Export:
      Name: !Sub '${AWS::StackName}-VPCTechS3VPCEndpointID'
  VPCProjectS3VPCEndpointID:
    Value: !Ref 'VPCProjectS3VPCEndpoint'
    Description: Project VPC Endpoint for S3
    Export:
      Name: !Sub '${AWS::StackName}-VPCProjectS3VPCEndpointID'
  DNSPrivateZoneID:
    Value: !Ref 'DNSPrivateZone'
    Description: Private DNS Zone ID
    Export:
      Name: !Sub '${AWS::StackName}-DNSPrivateZoneID'
